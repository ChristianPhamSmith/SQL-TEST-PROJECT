	/* step 3 */

SELECT TOP 100 
	 soh.SalesOrderID 
	,RevisionNumber 
	,OrderDate 
	/* The Replace function replaces a value with a different value */
	,Replace(Replace(Replace(replace(replace(replace(Status, 1, 'In Process'), 2, 'Approved'), 3, 'Backordered'), 4, 'Rejected'), 5, 'Shipped'), 6, 'Cancelled') AS OrderStatusText
	,SalesOrderNumber
	,SubTotal
	,TaxAmt
	,Freight
	,TotalDue
	,REPLACE(STR(OrderQty, 4), ' ', '0') AS OrderQtyText
	,UnitPrice
	,UnitPriceDiscount
	,LineTotal
	,City AS ShipToCity
	,sp.Name AS ShipToState
	,PostalCode AS ShipToZip
	,sp.CountryRegionCode AS ShipToCountryCode
	,cr.Name AS ShipToCountryName
	,pm.Name AS ModelName
	,pc.Name AS CategoryName
FROM Sales.SalesOrderHeader soh
	INNER JOIN Sales.SalesOrderDetail sod
		ON soh.SalesOrderID = sod.SalesOrderID
	INNER JOIN Person.Address a
		ON soh.ShipToAddressID = a.AddressID
	INNER JOIN Person.StateProvince sp
		ON a.StateProvinceID = sp.StateProvinceID
	INNER JOIN Person.CountryRegion cr
		ON cr.CountryRegionCode = sp.CountryRegionCode
	INNER JOIN Production.Product p
		ON sod.ProductID = p.ProductID
	INNER JOIN Production.ProductModel pm
		ON p.ProductModelID = pm.ProductModelID
	INNER JOIN Production.ProductSubcategory ps
		ON p.ProductSubcategoryID = ps.ProductSubcategoryID
	INNER JOIN Production.ProductCategory pc
		ON ps.ProductCategoryID = pc.ProductCategoryID 
ORDER BY 
	 soh.SalesOrderID

GO

	/* Step 4 */

CREATE PROCEDURE [dbo].[SalesOrderDetails]
AS
SELECT TOP 100 
	 soh.SalesOrderID 
	,RevisionNumber
	,OrderDate 
	,Replace(Replace(Replace(replace(replace(replace(Status, 1, 'In Process'), 2, 'Approved'), 3, 'Backordered'), 4, 'Rejected'), 5, 'Shipped'), 6, 'Cancelled') AS OrderStatusText
	,SalesOrderNumber
	,SubTotal
	,TaxAmt
	,Freight
	,TotalDue
	,REPLACE(STR(OrderQty, 4), ' ', '0') AS OrderQtyText
	,UnitPrice
	,UnitPriceDiscount
	,LineTotal
	,City AS ShipToCity
	,sp.Name AS ShipToState
	,PostalCode AS ShipToZip
	,sp.CountryRegionCode AS ShipToCountryCode
	,cr.Name AS ShipToCountryName
	,pm.Name AS ModelName
	,pc.Name AS CategoryName
FROM Sales.SalesOrderHeader soh
	INNER JOIN Sales.SalesOrderDetail sod
		ON soh.SalesOrderID = sod.SalesOrderID
	INNER JOIN Person.Address a
		ON soh.ShipToAddressID = a.AddressID
	INNER JOIN Person.StateProvince sp
		ON a.StateProvinceID = sp.StateProvinceID
	INNER JOIN Person.CountryRegion cr
		ON cr.CountryRegionCode = sp.CountryRegionCode
	INNER JOIN Production.Product p
		ON sod.ProductID = p.ProductID
	INNER JOIN Production.ProductModel pm
		ON p.ProductModelID = pm.ProductModelID
	INNER JOIN Production.ProductSubcategory ps
		ON p.ProductSubcategoryID = ps.ProductSubcategoryID
	INNER JOIN Production.ProductCategory pc
		ON ps.ProductCategoryID = pc.ProductCategoryID
WHERE OrderDate BETWEEN
	'2011-06-01' AND '2011-06-30'
	/*'2011-07-04' AND '2011-07-10'*/
	/*'2012-01-01' AND '2012-12-31'*/
	/*'2013-12-01' AND '2013-12-25'*/
ORDER BY 
	 soh.SalesOrderID

GO

DROP PROCEDURE [dbo].[SalesOrderDetails]

GO

EXEC [dbo].[SalesOrderDetails]

GO

	/* Step 6 */

CREATE PROCEDURE [dbo].[SalesOrdersDataReview]
AS

/* # allows you to create a temporary table */
CREATE TABLE #CalculatedSubtotal
	(
	 SalesOrderID INT
	,CalculatedSubtotalFromDetail DEC (15,6)
	)


INSERT INTO 
	#CalculatedSubtotal
	SELECT
		 SalesOrderID
		,SUM(LineTotal)
	FROM
		Sales.SalesOrderDetail
	/* GROUP BY takes all of the rows with the same specified column and combines them. */
	GROUP BY 
		SalesOrderID


SELECT
	 soh.SalesOrderID
	,SalesOrderNumber
	,SubTotal AS OriginalSubtotal
	,CalculatedSubtotalFromDetail
	,SubTotal - CalculatedSubtotalFromDetail AS Difference
FROM
	Sales.SalesOrderHeader soh
	INNER JOIN Sales.SalesOrderDetail sod
		ON soh.SalesOrderID = sod.SalesOrderID
	INNER JOIN #CalculatedSubtotal cs
		ON soh.SalesOrderID = cs.SalesOrderID

GO

DROP PROCEDURE [dbo].[SalesOrdersDataReview]

GO


EXEC [dbo].[SalesOrdersDataReview]

GO

	/* Step 8 a-c */

CREATE PROCEDURE [dbo].[XMLFun]
AS
CREATE TABLE #breakfast_menu
	(
	 FoodId VARCHAR(4)
	,Name VARCHAR(30)
	,Price VARCHAR(7)
	,Description VARCHAR(100)
	,Calories VARCHAR(4)
	)

INSERT INTO
	#breakfast_menu
	SELECT
		/* The value method allows you to select the data from the XML and allows you to specify the datatype. The [1] specifies that one value is returned. */
		 t.food.value('@id','VARCHAR(4)') AS FoodId
		,t.food.value('name [1]','VARCHAR(30)') AS Name
		,t.food.value('price [1]','VARCHAR(7)') AS Price
		,t.food.value('description [1]','VARCHAR(100)') AS Description
		,t.food.value('calories [1]','VARCHAR(4)') AS Calories
	FROM
	(
	SELECT
		/* CAST transforms c into the XML datatype */
		CAST(c AS XML)
	FROM
	/* OPENROWSET connects SQL Server with the XML file. Bulk and SINGLE_BLOB turns the imported data into a single row */
		OPENROWSET(BULK 'C:\XML_BreakfastMenu.xml', SINGLE_BLOB) AS t(c)
	) AS s(c)
	/* CROSS APPLY with nodes goes through the XML and returns the XML in rows based on the specified nodes in the XML */
	CROSS APPLY c.nodes('breakfast_menu/food') AS t(food)


	/* Step 8 d */

SELECT 
	 FoodId AS [@id]
	,Name AS Name
	,Price AS Price
	,Description AS Description
	,Calories AS Calories
FROM 
	#breakfast_menu
	/* FOR XML PATH transforms the select statment results into XML format. The value by path creates a row called "food" and ROOT creates a root called "breakfast_menu" */
FOR XML PATH('food'), ROOT('breakfast_menu')

	/* Step 8 e */

SELECT
	/* The STUFF fuction goes and deletes part of a string and inserts what you specified into the string. (string, start, length, string replacment) */
	STUFF(Name + 'x', LEN(Name + 'x'), 1, ', ')
FROM
	#breakfast_menu
FOR XML PATH(''), ROOT('list')


GO

DROP TABLE #breakfast_menu

GO

DROP PROCEDURE [dbo].[XMLFun]

GO

EXEC [dbo].[XMLFun]

GO

	/* Step 9 */

CREATE PROCEDURE [dbo].[SalesOrdersDataReviewWithCTE]
AS
/* This Creates a CTE. A CTE is like a temporary table exept CTEs only exist for one querry */
WITH CTE_CalculatedSubtotal AS 
(
SELECT
	 SalesOrderID
	,SUM(LineTotal) as CalculatedSubtotalFromDetail
FROM
	Sales.SalesOrderDetail
GROUP BY 
	SalesOrderID
)
SELECT
	 soh.SalesOrderID
	,SalesOrderNumber
	,SubTotal AS OriginalSubtotal
	,CalculatedSubtotalFromDetail
	,SubTotal - CalculatedSubtotalFromDetail AS Difference
FROM
	Sales.SalesOrderHeader soh
	INNER JOIN Sales.SalesOrderDetail sod
		ON soh.SalesOrderID = sod.SalesOrderID
	INNER JOIN CTE_CalculatedSubtotal cs
		ON soh.SalesOrderID = cs.SalesOrderID

GO

	/* Step 10 */

CREATE PROCEDURE [dbo].[SalesByYearBySalesperson]
AS
SELECT
	 SalesPersonID
	,[2011]
	,[2012]
	,[2013]
	,[2014]
FROM
(
SELECT DISTINCT
	 SalesPersonID
	,DATENAME(YEAR, OrderDate) [Year]
	,SubTotal
FROM Sales.SalesOrderHeader soh
) AS Src
/* PIVOT will transform a value into a column. In this case it is taking the Subtotal Sum for each year and making a column out of that data for each year */
PIVOT
(
	SUM(SubTotal)
	/* This makes the column names */ 
	FOR [Year] IN ([2011], [2012], [2013], [2014])
) AS Pvt

GO

	/* Step 11 */

CREATE FUNCTION dbo.ufnMyFunction
/* This creates the parameters for the function */
(
	 @YourNumber INT
	,@StringSize INT
)
RETURNS VARCHAR(30)
AS
BEGIN
	RETURN 
		(
		SELECT 
			/* Replicate will replicate the string for the number of times specified */
			REPLICATE
				('0', @StringSize - LEN(@YourNumber)) 
			+ 
			CAST
				(@YourNumber AS VARCHAR(30))
		)
END

SELECT 
	dbo.ufnMyFunction(20, 3)

GO

	/* Step 12 like operator, having clause, looping with cursor */

CREATE PROCEDURE [dbo].[SQLDrills]
AS
/* Declares the cursor name and what the cursor will do */
DECLARE RepairStore_Cursor CURSOR FOR  
SELECT 
	 Name
	,SUM(SubTotal) AS TotalSold
FROM
	Sales.Store s
	INNER JOIN Sales.Customer c
		ON s.BusinessEntityID = c.StoreID
	INNER JOIN Sales.SalesOrderHeader soh
		ON c.CustomerID = soh.CustomerID
WHERE Name LIKE '%Repair%'
GROUP BY
	NAME
/* Having is like where but comes after GROUP BY and you can use aggregate functions with it */
HAVING SUM(SubTotal) > 100000
OPEN RepairStore_Cursor;  
/* Fetches the next row from the cursor */
FETCH NEXT FROM RepairStore_Cursor;
/* This means that the cursor will keep fetching rows untill it is unsucessful */
WHILE @@FETCH_STATUS = 0  
   BEGIN  
      FETCH NEXT FROM RepairStore_Cursor;  
   END;  
CLOSE RepairStore_Cursor;  
/* DEALLOCATE gets rid of the cursor */
DEALLOCATE RepairStore_Cursor;  

/* Step 12 looping without cursor, distinct operator, temp table */

CREATE TABLE #PrizeWinners
(
	WinnerNames VARCHAR(30)
)
WHILE (SELECT COUNT(DISTINCT WinnerNames) FROM #PrizeWinners) < 3
BEGIN
INSERT INTO #PrizeWinners
SELECT 
	TOP 1
	FirstName
FROM Sales.SalesPerson sp 
	INNER JOIN Person.Person p 
	ON sp.BusinessEntityID = p.BusinessEntityID 
	/* NEWID selects a random value */
ORDER BY NEWID()
END
SELECT 
	* 
FROM 
	#PrizeWinners
DROP TABLE 
	#PrizeWinners

	/* Step 12 table variables, exists condition */

/* A table variable is like a temp table but it stops existing after the the procedure is closed */
DECLARE @BlueTable TABLE
(
  Name VARCHAR(50)
)
INSERT INTO @BlueTable
SELECT 
	Name
FROM 
	Sales.Store
WHERE
	/* EXISTS returns true or false depending on if any rows are returned */
	EXISTS(
		SELECT 
			Name
		FROM 
			Production.Product
		WHERE
			Color = 'Blue'
		)
	AND Name LIKE '%Blue%'

SELECT * FROM @BlueTable
